"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class trunk_state_t(object):
    __slots__ = ["timestamp", "finished", "base_p", "base_pd", "base_pdd", "base_rpy", "base_rpyd", "base_rpydd", "lf_p", "rf_p", "lh_p", "rh_p", "lf_pd", "rf_pd", "lh_pd", "rh_pd", "lf_pdd", "rf_pdd", "lh_pdd", "rh_pdd", "lf_contact", "rf_contact", "lh_contact", "rh_contact", "lf_f", "rf_f", "lh_f", "rh_f"]

    __typenames__ = ["double", "boolean", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "boolean", "boolean", "boolean", "boolean", "double", "double", "double", "double"]

    __dimensions__ = [None, None, [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], [3], None, None, None, None, [3], [3], [3], [3]]

    def __init__(self):
        self.timestamp = 0.0
        self.finished = False
        self.base_p = [ 0.0 for dim0 in range(3) ]
        self.base_pd = [ 0.0 for dim0 in range(3) ]
        self.base_pdd = [ 0.0 for dim0 in range(3) ]
        self.base_rpy = [ 0.0 for dim0 in range(3) ]
        self.base_rpyd = [ 0.0 for dim0 in range(3) ]
        self.base_rpydd = [ 0.0 for dim0 in range(3) ]
        self.lf_p = [ 0.0 for dim0 in range(3) ]
        self.rf_p = [ 0.0 for dim0 in range(3) ]
        self.lh_p = [ 0.0 for dim0 in range(3) ]
        self.rh_p = [ 0.0 for dim0 in range(3) ]
        self.lf_pd = [ 0.0 for dim0 in range(3) ]
        self.rf_pd = [ 0.0 for dim0 in range(3) ]
        self.lh_pd = [ 0.0 for dim0 in range(3) ]
        self.rh_pd = [ 0.0 for dim0 in range(3) ]
        self.lf_pdd = [ 0.0 for dim0 in range(3) ]
        self.rf_pdd = [ 0.0 for dim0 in range(3) ]
        self.lh_pdd = [ 0.0 for dim0 in range(3) ]
        self.rh_pdd = [ 0.0 for dim0 in range(3) ]
        self.lf_contact = False
        self.rf_contact = False
        self.lh_contact = False
        self.rh_contact = False
        self.lf_f = [ 0.0 for dim0 in range(3) ]
        self.rf_f = [ 0.0 for dim0 in range(3) ]
        self.lh_f = [ 0.0 for dim0 in range(3) ]
        self.rh_f = [ 0.0 for dim0 in range(3) ]

    def encode(self):
        buf = BytesIO()
        buf.write(trunk_state_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">db", self.timestamp, self.finished))
        buf.write(struct.pack('>3d', *self.base_p[:3]))
        buf.write(struct.pack('>3d', *self.base_pd[:3]))
        buf.write(struct.pack('>3d', *self.base_pdd[:3]))
        buf.write(struct.pack('>3d', *self.base_rpy[:3]))
        buf.write(struct.pack('>3d', *self.base_rpyd[:3]))
        buf.write(struct.pack('>3d', *self.base_rpydd[:3]))
        buf.write(struct.pack('>3d', *self.lf_p[:3]))
        buf.write(struct.pack('>3d', *self.rf_p[:3]))
        buf.write(struct.pack('>3d', *self.lh_p[:3]))
        buf.write(struct.pack('>3d', *self.rh_p[:3]))
        buf.write(struct.pack('>3d', *self.lf_pd[:3]))
        buf.write(struct.pack('>3d', *self.rf_pd[:3]))
        buf.write(struct.pack('>3d', *self.lh_pd[:3]))
        buf.write(struct.pack('>3d', *self.rh_pd[:3]))
        buf.write(struct.pack('>3d', *self.lf_pdd[:3]))
        buf.write(struct.pack('>3d', *self.rf_pdd[:3]))
        buf.write(struct.pack('>3d', *self.lh_pdd[:3]))
        buf.write(struct.pack('>3d', *self.rh_pdd[:3]))
        buf.write(struct.pack(">bbbb", self.lf_contact, self.rf_contact, self.lh_contact, self.rh_contact))
        buf.write(struct.pack('>3d', *self.lf_f[:3]))
        buf.write(struct.pack('>3d', *self.rf_f[:3]))
        buf.write(struct.pack('>3d', *self.lh_f[:3]))
        buf.write(struct.pack('>3d', *self.rh_f[:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != trunk_state_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return trunk_state_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = trunk_state_t()
        self.timestamp = struct.unpack(">d", buf.read(8))[0]
        self.finished = bool(struct.unpack('b', buf.read(1))[0])
        self.base_p = struct.unpack('>3d', buf.read(24))
        self.base_pd = struct.unpack('>3d', buf.read(24))
        self.base_pdd = struct.unpack('>3d', buf.read(24))
        self.base_rpy = struct.unpack('>3d', buf.read(24))
        self.base_rpyd = struct.unpack('>3d', buf.read(24))
        self.base_rpydd = struct.unpack('>3d', buf.read(24))
        self.lf_p = struct.unpack('>3d', buf.read(24))
        self.rf_p = struct.unpack('>3d', buf.read(24))
        self.lh_p = struct.unpack('>3d', buf.read(24))
        self.rh_p = struct.unpack('>3d', buf.read(24))
        self.lf_pd = struct.unpack('>3d', buf.read(24))
        self.rf_pd = struct.unpack('>3d', buf.read(24))
        self.lh_pd = struct.unpack('>3d', buf.read(24))
        self.rh_pd = struct.unpack('>3d', buf.read(24))
        self.lf_pdd = struct.unpack('>3d', buf.read(24))
        self.rf_pdd = struct.unpack('>3d', buf.read(24))
        self.lh_pdd = struct.unpack('>3d', buf.read(24))
        self.rh_pdd = struct.unpack('>3d', buf.read(24))
        self.lf_contact = bool(struct.unpack('b', buf.read(1))[0])
        self.rf_contact = bool(struct.unpack('b', buf.read(1))[0])
        self.lh_contact = bool(struct.unpack('b', buf.read(1))[0])
        self.rh_contact = bool(struct.unpack('b', buf.read(1))[0])
        self.lf_f = struct.unpack('>3d', buf.read(24))
        self.rf_f = struct.unpack('>3d', buf.read(24))
        self.lh_f = struct.unpack('>3d', buf.read(24))
        self.rh_f = struct.unpack('>3d', buf.read(24))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if trunk_state_t in parents: return 0
        tmphash = (0xbd03c56c9649d0b6) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if trunk_state_t._packed_fingerprint is None:
            trunk_state_t._packed_fingerprint = struct.pack(">Q", trunk_state_t._get_hash_recursive([]))
        return trunk_state_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

